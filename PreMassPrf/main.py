from PreMassPrf.annotation import Annotation
import vcf
from Bio.Seq import Seq
import copy 


class MassPrf:
    def __init__(self, vcf_file, gff_file, ref_file, divergent, outgroup, verbose):
        self.vcf_reader = vcf.Reader(filename=vcf_file)
        self.annot = Annotation(gff_file, ref_file)
        self.divergent = divergent
        self.outgroup = outgroup
        self.all_samples = self.get_all_samples()
        self.target_samples = list(set(self.all_samples) - set([self.divergent]) - set([self.outgroup]))
        self.comp = {'A': 'T', 'T': 'A', 'C': 'G', 'G': 'C'}
        self.verbose = verbose

    def __vprint(self, words):
        if self.verbose:
            print(words)

    def get_all_samples(self):
        """
        Returns the names of all the sampes in the vcf file 
        :return: a list of sample names, ex ['HMS_Benny', 'HMS_PJ22', 'HMS_YE37']
        """
        return self.vcf_reader.samples

    def print_all(self):
        for record in self.vcf_reader:
            print(record)

    def sample_trs(self, gene):
        """
        Returns a dict of the transripts of all the samples for a given gene 
        :param gene: ex. <Feature gene (2L:7529-9484[+]) at 0x...>. self.annot.get_gene('gene name') can return a gene object for a given gene name
        :return: sample_transcripts['sample name']['transcript name'] = 'ATGNNNNNNNNNNNNNNSTOP'
        """
        transcript_info, mRNA_transcripts = self.annot.transcript_dict(gene)
        sample_transcripts = {}

        for sample in self.all_samples:
            sample_transcripts[sample] = copy.deepcopy(mRNA_transcripts)  # assign transcripts to each sample

        # print(f"{gene.id} start:", gene.start, "end:", gene.end)
        records = None
        try:
            records = self.vcf_reader.fetch(gene.chrom, gene.start, gene.end)
        except ValueError:
            return sample_transcripts

        for record in records:
            # print(record)
            if record.POS in transcript_info:
                # print(record.samples)
                for call in record.samples:
                    # hom_ref = 0 het = 1 hom_alt = 2
                    if call.gt_type == 1 and (call.sample is self.divergent or call.sample is self.outgroup):
                        for data in transcript_info[record.POS]:
                            transcript_name = data[0]
                            str_index = data[1]
                            self.__vprint(
                                f"{transcript_name}: 1- Sample is {call.gt_bases} at {record.POS}. Changed position {str_index} from {sample_transcripts[call.sample][transcript_name][str_index]} to N in sample {call.sample}")

                            current = sample_transcripts[call.sample][transcript_name]
                            sample_transcripts[call.sample][transcript_name] = current[:str_index] + "N" + current[
                                                                                                           str_index + 1:]
                    elif call.gt_type == 2 or call.gt_type == 1:
                        for data in transcript_info[record.POS]:
                            transcript_name = data[0]
                            str_index = data[1]
                            ALT = str(record.alleles[1])

                            if gene.strand == '-':
                                ALT = self.comp[ALT]
                                # print('was on the - strand')

                            self.__vprint(
                                f"{transcript_name}: 2- Sample is {call.gt_bases} at {record.POS}. Changed position {str_index} from {sample_transcripts[call.sample][transcript_name][str_index]} to {ALT} in sample {call.sample}")

                            current = sample_transcripts[call.sample][transcript_name]
                            sample_transcripts[call.sample][transcript_name] = current[:str_index] + str(ALT) + current[
                                                                                                                str_index + 1:]

        # print(sample_transcripts)
        return sample_transcripts

    def codon_dict(self, sample_transcripts):
        # given a dictionary of transcripts, return a dictionary of codons representing those transcripts 
        # :param: sample_transcripts['sample name']['transcript name'] = 'ATGNNNNNNNNNNNNNNSTOP'
        #         Note: generated by self.sample_trs()
        # :return: nested dict where for each codon index, there are three keys one for target samples, 
        #          one for the divergnet (sister), and one for outgroup:
        #          codon[transcript_name][codon index]['target_samples'] = Set('GCG', 'GCC')
        #          codon[transcript_name][codon index][self.divergent] = 'GCG'
        #          codon[transcript_name][codon index][self.outgroup] = 'GCG'
        codon = {}
        for sample_name in sample_transcripts:
            sample = sample_transcripts[sample_name]
            for transcript_name in sample:
                transcript = sample[transcript_name]
                if transcript_name not in codon:
                    codon[transcript_name] = {}
                triplets = [transcript[i:i + 3] for i in range(0, len(transcript), 3)]
                
                if sample_name in self.target_samples:
                    for i in range(len(triplets)):
                        if not i in codon[transcript_name]:
                            codon[transcript_name][i] = {}
                        if not 'target_samples' in codon[transcript_name][i]:
                            codon[transcript_name][i]['target_samples'] = set()
                        
                        codon[transcript_name][i]['target_samples'].add(triplets[i])
                else: 
                    for i in range(len(triplets)):
                        if not i in codon[transcript_name]:
                            codon[transcript_name][i] = {}
                        
                        codon[transcript_name][i][sample_name] = triplets[i]
                    

        return codon
    def codon_diff(self, codon1, codon2):
        """
        Returns the consensus sequence given two codons
        :param codon1, codon2 - Seq objects
        :return consensus string, ex "***", "*R*", "S*R"
        """

        consensus = ''
        codon1_aa = codon1.translate()
        codon2_aa = codon2.translate()

        for j in range(len(codon1)):
            if codon1[j] != codon2[j]:
                new_codon = codon2[:j] + codon1[j] + codon2[j + 1:]
                if codon2_aa != new_codon.translate():
                    consensus += 'R'
                    self.__vprint("Replacement")
                else:
                    consensus += 'S'
                    self.__vprint("Silent")
            else:
                consensus += "*"
        return consensus


    def consensus(self, gene, tr_dict = None, out_dir = None):
        """
        Returns the consensus sequence for both the target and divergent samples 
        :param gene <Feature gene (2L:7529-9484[+]) at 0x...>. 
        :param tr_dict is an optional user defined sample transcript 
        :param out_dir is an optional directory to save the name of polymorphic target gene names

        :return: consensus_dict = {'transcript name': {
                                    'target': '*********R***S****', 
                                    'divergent': '*********R***S****'}
                                  }
        """
        if tr_dict:
            codon_dict = self.codon_dict(tr_dict)
        else:
            codon_dict = self.codon_dict(self.sample_trs(gene))

        all_transcript_names = list(codon_dict.keys())
        consensus_dict = {}
        is_polymorphic = False

        # print(f'Transcript names: {str(all_transcript_names)}')
        for transcript_name in all_transcript_names:
            num_codons = len(codon_dict[transcript_name].keys())
            consensus_dict[transcript_name] = {'target': '', 'divergent': ''}
            transcript_codons = codon_dict[transcript_name]

            for i in range(num_codons):
                div_codon_str = transcript_codons[i][self.divergent]
                div_codon = Seq(div_codon_str)
                div_aa = div_codon.translate()

              
                if (len(transcript_codons[i]['target_samples']) == 1):
                    # then the target sites of this codon must be fixed
                    consensus_dict[transcript_name]['target'] += '***'
                    target_codon = Seq(transcript_codons[i]['target_samples'].pop())
                    if target_codon == div_codon:
                        consensus_dict[transcript_name]['divergent'] += '***'
                    else:
                        consensus_dict[transcript_name]['divergent'] += self.codon_diff(target_codon, div_codon)
                else:
                    # there is a site in this codon position that is polymorphic
                    is_polymorphic = True

                    ref_target_codon = Seq(transcript_codons[i]['target_samples'].pop())
                    ref_target_aa = ref_target_codon.translate()
                    temp = '***'
                    diff = div_codon # used to create a codon which differs the most from the divergent codon, given the target samples 

                    for j in range(len(div_codon)):
                        for sample in transcript_codons[i]['target_samples']:
                            target_codon = Seq(sample)

                            if target_codon[j] != ref_target_codon[j]:
                                new_codon = ref_target_codon[:j] + target_codon[j] + ref_target_codon[j + 1:]
                                if ref_target_aa != new_codon.translate():
                                    temp = temp[:j] + 'R' + temp[j + 1:]
                                    self.__vprint("Replacement")
                                elif temp[j] != 'R':
                                    temp = temp[:j] + 'S' + temp[j + 1:]
                                    self.__vprint("Silent")

                            if len(diff) == j and (div_codon[j] == target_codon[j] or div_codon[j] == ref_target_codon[j]):
                                diff += div_codon_str[j]
                        if len(diff) != j + 1:
                            diff += ref_target_codon[j]


                    consensus_dict[transcript_name]['target'] += temp

                    if div_codon_str in transcript_codons[i]['target_samples']:
                        consensus_dict[transcript_name]['divergent'] += '***'
                    else:
                        consensus_dict[transcript_name]['divergent'] += self.codon_diff(div_codon, diff)

            if out_dir and is_polymorphic:
                gene_name = gene['Name'][0]
                with open(f'{out_dir}/polymorphic_genes.txt', 'a+') as f:
                    f.write(f'{gene_name} {transcript_name}\n')

        return consensus_dict
    

    def reconstruct(self, target_codon, div_codon, out_codon): 
        """
        Create the ancestral codon given the target, divergent (sister), and outgroup codons. 
        :param str or Seq object 

        :return: str of the ancestral codon 
        """

        temp_codon = ''

        for j in range(len(target_codon)):   # get ancestral codon sequence 
            if target_codon[j] != div_codon[j]:
                if target_codon[j] == out_codon[j]:
                    temp_codon += target_codon[j]
                else:
                    temp_codon += div_codon[j]
            else:
                temp_codon += target_codon[j]
        return temp_codon

    def gen_ancestor(self, gene, tr_dict = None):
        """
        Generates the ancestral sequence and the consensus sequence for that gene
        :param gene ex. <Feature gene (2L:7529-9484[+]) at 0x...>. Note: self.annot.get_gene('gene name') can return a gene object

        :return: dict were each transcript has both the ancestral sequence and consensus sequence 
                 ex. ancestor_dict[transcript_name]['ancestor']
                 ex. ancestor_dict[transcript_name]['consensus']
        """
        if tr_dict:
            codon_dict = self.codon_dict(tr_dict)
        else:
            codon_dict = self.codon_dict(self.sample_trs(gene))

        all_transcript_names = list(codon_dict.keys())
        ancestor_dict = {}

        self.__vprint(f'Transcript names: {str(all_transcript_names)}')
        for transcript_name in all_transcript_names:
            num_codons = len(codon_dict[transcript_name].keys())
            ancestor_dict[transcript_name] = {'consensus': '', 'ancestor': ''}
            transcript_codons = codon_dict[transcript_name]

            for i in range(num_codons):
                div_codon_str = transcript_codons[i][self.divergent]
                out_codon_str = transcript_codons[i][self.outgroup]
                div_codon = Seq(div_codon_str)
                out_codon = Seq(out_codon_str)
                div_aa = div_codon.translate()


                if (len(transcript_codons[i]['target_samples']) == 1):
                    # then no polymorphisms within this codon in the target samples 
                    target_codon_str = transcript_codons[i]['target_samples'].pop()
                    target_codon = Seq(target_codon_str)

                    if div_codon == out_codon:
                        ancestor_dict[transcript_name]['ancestor'] += div_codon_str
                        ancestor_dict[transcript_name]['consensus'] += self.codon_diff(div_codon, target_codon)
                    else: 
                        anc_codon = self.reconstruct(target_codon, div_codon, out_codon)
                        ancestor_dict[transcript_name]['ancestor'] += anc_codon
                        ancestor_dict[transcript_name]['consensus'] += self.codon_diff(Seq(anc_codon), target_codon)
                else:
                    diff = ''
                    target_codon = None
                    for j in range(len(div_codon)):
                        for sample in transcript_codons[i]['target_samples']:
                            target_codon = Seq(sample)
                            if len(diff) == j and (target_codon[j] == div_codon[j]):
                                diff += div_codon[j]
                        if len(diff) != j + 1:
                            diff += target_codon[j]

                    diff_codon = Seq(diff)
                    if div_codon == out_codon:
                        ancestor_dict[transcript_name]['ancestor'] += div_codon_str
                        ancestor_dict[transcript_name]['consensus'] += self.codon_diff(div_codon, diff_codon)
                    else: 
                        anc_codon = self.reconstruct(diff_codon, div_codon, out_codon)
                        ancestor_dict[transcript_name]['ancestor'] += anc_codon
                        ancestor_dict[transcript_name]['consensus'] += self.codon_diff(Seq(anc_codon), diff_codon)

        return ancestor_dict

    """

    Filewriting functions for CLI 


    """
    def consensus_all_genes(self, out_dir):
        """
        For all gene transcripts get the divergent and polymorphic consensus sequences 

        """
        genes = self.annot.get_all_genes()
        for gene in genes:
            if gene['gene_biotype'][0] == 'protein_coding':
                consensus_dict = self.consensus(gene, out_dir = out_dir)
                all_transcript_names = list(consensus_dict.keys())

                for transcript_name in all_transcript_names:
                    self.save_consensus_target(gene['Name'][0], transcript_name, consensus_dict[transcript_name], out_dir)
                    self.save_consensus_div(gene['Name'][0], transcript_name, consensus_dict[transcript_name], out_dir)

    def consensus_specific(self, filename, out_dir):
        with open(filename, 'r') as f:
            gene_names = f.readlines()

            for gene_name in gene_names:
                gene = self.annot.get_gene(gene_name.strip('\n'))
                consensus_dict = self.consensus(gene, out_dir = out_dir)
                all_transcript_names = list(consensus_dict.keys())

                for transcript_name in all_transcript_names:
                    self.save_consensus_target(gene['Name'][0], transcript_name, consensus_dict[transcript_name], out_dir)
                    self.save_consensus_div(gene['Name'][0], transcript_name, consensus_dict[transcript_name], out_dir)


    def save_consensus_target(self, gene_id, transcript_name, data, out_dir):
        """
        For a given divergent and target consensus sequence, write the sequences to files 

        """
        with open(f'{out_dir}/consensus_{gene_id}_{transcript_name}_pol.txt', 'w+') as f:
            f.write(f'>Polymorphism_consensus\n{data["target"]}\n')


    def save_consensus_div(self, gene_id, transcript_name, data, out_dir):
        """
        For a given divergent and target consensus sequence, write the sequences to files 

        """
        with open(f'{out_dir}/consensus_{gene_id}_{transcript_name}_div.txt', 'w+') as f:
            f.write(f'>Divergence_consensus\n{data["divergent"]}\n')


    def full_fasta_all(self, out_dir):
        genes = self.annot.get_all_genes()

        for gene in genes:
            if gene['gene_biotype'][0] == 'protein_coding':
                sample_dict = self.sample_trs(gene)
                # sample_transcripts['sample name']['transcript name']

                all_transcript_names = list(sample_dict[self.divergent].keys())
                for transcript_name in all_transcript_names:
                        self.save_fasta_div(gene['Name'][0], self.divergent, transcript_name, sample_dict[self.divergent][transcript_name], out_dir)

                for sample in self.target_samples:
                    for transcript_name in all_transcript_names:
                        self.save_fasta(gene['Name'][0], sample, transcript_name, sample_dict[sample][transcript_name], out_dir)

    def full_fasta_specific(self, filename, out_dir):
        genes = self.annot.get_all_genes()

        with open(filename, 'r') as f:
            gene_names = f.readlines()

            for gene_name in gene_names:
                gene = self.annot.get_gene(gene_name.strip('\n'))
                sample_dict = self.sample_trs(gene)
                # sample_transcripts['sample name']['transcript name']

                all_transcript_names = list(sample_dict[self.divergent].keys())
                for transcript_name in all_transcript_names:
                        self.save_fasta_div(gene['Name'][0], self.divergent, transcript_name, sample_dict[self.divergent][transcript_name], out_dir)

                for sample in self.target_samples:
                    for transcript_name in all_transcript_names:
                        self.save_fasta(gene['Name'][0], sample, transcript_name, sample_dict[sample][transcript_name], out_dir)

    def save_fasta(self, gene_id, sample_name, transcript_name, data, out_dir):
        with open(f'{out_dir}/{gene_id}_{transcript_name}_pol.fasta', 'a+') as f:
            f.write(f'>{sample_name}\n{data}\n')

    def save_fasta_div(self, gene_id, sample_name, transcript_name, data, out_dir):
        with open(f'{out_dir}/{gene_id}_{transcript_name}_div.fasta', 'a+') as f:
            f.write(f'>{sample_name}\n{data}\n')

    def ancestral_all_genes(self, out_dir):
        genes = self.annot.get_all_genes()

        for gene in genes:
            if gene['gene_biotype'][0] == 'protein_coding':
                # ancestor_dict[transcript_name]['ancestor']
                consensus_dict = self.consensus(gene, out_dir = out_dir)
                ancestor_dict = self.gen_ancestor(gene)
                all_transcript_names = list(ancestor_dict.keys())

                for transcript_name in all_transcript_names:
                    self.save_ancestral(gene['Name'][0], transcript_name, ancestor_dict[transcript_name], out_dir)
                    self.save_consensus_target(gene['Name'][0], transcript_name, consensus_dict[transcript_name], out_dir)


    def ancestral_specific(self, filename, out_dir):
        with open(filename, 'r') as f:
            gene_names = f.readlines()

            for gene_name in gene_names:
                gene = self.annot.get_gene(gene_name.strip('\n'))

                consensus_dict = self.consensus(gene, out_dir = out_dir)
                ancestor_dict = self.gen_ancestor(gene)
                all_transcript_names = list(ancestor_dict.keys())

                for transcript_name in all_transcript_names:
                    self.save_ancestral(gene['Name'][0], transcript_name, ancestor_dict[transcript_name], out_dir)
                    self.save_consensus_target(gene['Name'][0], transcript_name, consensus_dict[transcript_name], out_dir)


    def save_ancestral(self, gene_id, transcript_name, data, out_dir):
        anc = data['ancestor']
        con = data['consensus']
        with open(f'{out_dir}/{gene_id}_{transcript_name}_anc.fasta', 'w+') as f:
            f.write(f'>Anc_from_{self.divergent}_and_{self.outgroup}\n{ anc }\n')
        with open(f'{out_dir}/{gene_id}_{transcript_name}_anc_con.fasta', 'w+') as f:
            f.write(f'>Anc_from_{self.divergent}_and_{self.outgroup}_consensus\n{ con }\n')

if __name__ == "__main__":
    loc = "/home/accts/ewa2/PMF/PreMassPrf"
    gff_loc = f'{loc}/NW_018734359.1.gff'
    ref_loc = f'{loc}/NW_018734359.1.fasta'
    vcf_loc = f'{loc}/HMS_weddell_AFS_34359.vcf.gz'
    
    # Allows us to interact with the fasta file and get gene transcripts from the fasta 
    A1 = Annotation(gff_loc, ref_loc)

    print("Number of genes: " + str(A1.num_type("gene")))
    # get a gene from a gene ID
    gene = A1.get_gene('gene17317')

    # get a dict which relates chromosome posisiton to transcript position, and a dict of the transcripts of that gene 
    pos_dict, mRNA_transcripts = A1.transcript_dict(gene)
    # pos_dict[position#] = [['mRNA ID', index in transcript string, nucleotide letter]]  
    # mRNA_transcripts['mRNA ID'] = 'ATGNNNNNNNNNNNNSTOP'

    # get all the genes identified in the gff. TODO: make sure no pseudogenes are included 
    all_genes = A1.get_all_genes()
    # returns an generator that can be looped through 
    # for gene in all_genes:
    #     print(gene)




    # Allows us to work with variants and the fasta/gff file together
    # MassPrf('C/user/vcf file location', Annotation object, [divergent], [outgroup])
    R1 = MassPrf(vcf_loc, gff_loc, ref_loc, 'WED1', 'AFS1', True)

    # Get a dict of the ancestral sequence and consensus sequence 
    gene = A1.get_gene('gene17317')
    ancestral = R1.gen_ancestor(gene)
    print(ancestral)
    # ancestral[transcript_name]['ancestor']
    # ancestral[transcript_name]['consensus']



    data = {'HMS_Benny': {'rna20964': 'ATGAGGGAATGAT'}, 
            'HMS_PJ22': {'rna20964': 'ATGAGGGGGTAAT'},  
            'HMS_YE37': {'rna20964': 'ATGAGGGGGTGAT'},  
            'WED1': {'rna20964': 'ATGCGGGGGTGAT'}, 
            'AFS1': {'rna20964': 'ATGCGGGGGTGAT'}}
    # additional functionality for ensuring that functions are working correctly: use a self defined transcript dict to 
    # observe effects on the output 
    ancestral = R1.gen_ancestor(None, tr_dict = data)
    print("R1.gen_ancestor(None, data) output:",  ancestral)
    target_divergent_conensus = R1.consensus(None, tr_dict = data)
    print("R1.consensus(None, data) output:", target_divergent_conensus)
